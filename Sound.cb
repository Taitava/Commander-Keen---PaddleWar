
Function LoadSounds()
	PaddleSnd	= LoadSound("Audio\paddle.wav")
	BorderSnd	= LoadSound("Audio\border.wav")
	GoalSnd		= LoadSound("Audio\goal.wav")
	FailSnd		= LoadSound("Audio\fail.wav")
	EntranceSnd	= LoadSound("Audio\entrance.wav")
	ClearSnd	= LoadSound("Audio\clear.wav")
	PogoSnd		= LoadSound("Audio\pogo.wav")
	DeathSnd	= LoadSound("Audio\death.wav")
EndFunction

Function Sound(snd,x#)
	leftright = -100 + (x/ScreenWidth())*200
	PlaySound snd, cfgSoundVolume, leftright
EndFunction

Function LoadMusics()
	NewMusic("Audio\aliens-ate-my-babysitter.Mid")
	NewMusic("Audio\a-world-of-wonderment.Mid")
	NewMusic("Audio\be-sphereful-with-my-diamonds.Mid")
	NewMusic("Audio\jazz-me.Mid")
	NewMusic("Audio\make-it-tighter.Mid")
	NewMusic("Audio\to-the-future.Mid")
	NewMusic("Audio\wednesday-on-the-beach.Mid")
	NewMusic("Audio\welcome-to-a-kick-in-the-pants-in-good-old-hillville.Mid")
	NewMusic("Audio\you've-got-To-eat-your-vegetables.Mid")
EndFunction

Function NewMusic(path$)
	m.Music	= New(Music)
	m\path	= path
	CountMusics + 1
	
	// Find a duration For this music
	music_file_name$ = GetWord(path, Int(CountWords(path,"\")), "\") // Remove directory from path
	file = OpenToRead(MUSIC_DURATIONS_FILE_PATH)
	While Not EOF(file)
		line_$ = Trim(ReadLine(file))
		line_music_file_name$ = GetWord(line_,1)
		If Lower(line_music_file_name) = Lower(music_file_name) Then
			// This Line contains the duration
			duration_raw$ = GetWord(line_,2) // A String like 01:09, 01 is minutes And 09 is seconds
			m\duration = Int(GetWord(duration_raw,1,":")) * 60 + Int(GetWord(duration_raw,2,":"))
		EndIf
	Wend
	CloseFile file
	If Not m\duration Then MakeError "NewMusic(): " + MUSIC_DURATIONS_FILE_PATH + " file does Not contain duration For music " + music_file_name + "."
EndFunction

Function PlayMusic()
	play = False
	If Not MusicChannel Then
		play = True
	// Do Not check SoundPlaying(MusicChannel) because it's slow when called every Time in a game loop. Besides we do Not need it As the Timer below detects when a music should End.
	ElseIf Timer()-tmrMusicStarted > MusicDuration*1000 Then
		// The music is repeating although it should Not Repeat. Stop it so we can play a New one.
		StopSound MusicChannel
		play = True
	EndIf
	If play Then
		m.Music = RandomMusic()
		MusicChannel = PlaySound(m\path,cfgMusicVolume)
		SetSound MusicChannel, OFF, cfgMusicVolume
		MusicDuration = m\duration
		tmrMusicStarted = Timer()
	EndIf
EndFunction

Function UpdateMusicVolume()
	If MusicChannel Then
		If SoundPlaying(MusicChannel) Then SetSound MusicChannel, OFF, cfgMusicVolume
	EndIf
EndFunction

Global RandomMusic_last
Function RandomMusic()
	Repeat
		r = Rand(CountMusics-1)
	Until r <> RandomMusic_last
	RandomMusic_last = r
	i = 0
	For m.Music = Each Music
		If i = r Then Return ConvertToInteger(m)
		i + 1
	Next m
	MakeError "Music Access Violation"
EndFunction

Function StopMusic()
	If MusicChannel Then
		If SoundPlaying(MusicChannel) Then StopSound MusicChannel
		MusicChannel = False
	EndIf
EndFunction

Function ChangeMusic()
	StopMusic()
	PlayMusic()
EndFunction
